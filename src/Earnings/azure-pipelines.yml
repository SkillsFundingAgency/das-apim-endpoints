#################################################################################################################################################
#### NOTE - This is a non-standard pipeline due requirements for the Earnings endpoint to use a package the dct-pkg in Azure artifacts.
####        This pipeline has the build stage steps hardcoded to allow the custom DotNetCoreCLI@2 restore task The deploy stages still
####        make use of platform-building-block templates. If another serice requires a similar setup then consideration needs to be taken
####        to merge these changes: https://github.com/SkillsFundingAgency/das-platform-building-blocks/pull/340. This code change has a
####        dependency on platform building blocks being updated to 2.x.x so that the breaking changes to the generate-config.yml task
####        are resolved.
#################################################################################################################################################

parameters:
- name: SandboxEnabled
  default: $False
- name: AddXForwardedAuthorization
  default: $False
- name: SharedOuterApiTestProjectPathToInclude
  default: 'src/Shared/SFA.DAS.SharedOuterApi.UnitTests/SFA.DAS.SharedOuterApi.UnitTests.csproj'
- name: SonarCloudProjectKey
  default: SkillsFundingAgency_das-apim-endpoints_Earnings
- name: TargetProjects
  default: |
    src/Earnings/**/*.csproj
    src/Shared/SFA.DAS.SharedOuterApi/SFA.DAS.SharedOuterApi.csproj
    src/Shared/SFA.DAS.SharedOuterApi.UnitTests/SFA.DAS.SharedOuterApi.UnitTests.csproj
- name: UnitTestProjects
  default: |
    src/Earnings/**/*UnitTests.csproj
    src/Shared/SFA.DAS.SharedOuterApi.UnitTests/SFA.DAS.SharedOuterApi.UnitTests.csproj
- name: AcceptanceTestProjects
  default: 'src/Earnings/**/*AcceptanceTests.csproj'
- name: PublishProject
  default: 'src/Earnings/SFA.DAS.Earnings.Api/SFA.DAS.Earnings.Api.csproj'
- name: SonarCloud
  default: true
- name: RunAcceptanceTests
  default: true
- name: ContinueOnVulnerablePackageScanError
  default: true

trigger:
  batch: true
  branches:
    include:
      - "master"
  paths:
    include:
    - azure
    - pipeline-templates
    - src/Earnings

pr:
  autoCancel: true
  branches:
    include:
      - "master"
  paths:
    include:
    - azure
    - pipeline-templates
    - src/Earnings

variables:
- group: Release Management Resources
- group: RELEASE das-apim-endpoints

resources:
  repositories:
  - repository: self
  - repository: das-platform-building-blocks
    type: github
    name: SkillsFundingAgency/das-platform-building-blocks
    ref: refs/tags/1.0.7
    endpoint: SkillsFundingAgency
  - repository: das-platform-automation
    type: github
    name: SkillsFundingAgency/das-platform-automation
    ref: refs/tags/5.1.7
    endpoint: SkillsFundingAgency
  pipelines:
  - pipeline: das-employer-config
    project: Digital Apprenticeship Service
    source: das-employer-config
    branch: master

stages:
- stage: Build
  jobs:
  - job: CodeBuild
    pool:
      name: DAS - Continuous Integration Agents
    variables:
    - group: ESFA - SonarCloud
    - name: buildConfiguration
      value: release
    workspace:
      clean: all
    steps:
    - template: azure-pipelines-templates/build/step/gitversion.yml@das-platform-building-blocks

    - task: SonarCloudPrepare@2
      displayName: Prepare SonarCloud analysis configuration
      condition: and(succeeded(), or(in(variables['Build.SourceBranch'], 'refs/heads/master', 'refs/heads/main'), eq(variables['Build.Reason'], 'PullRequest')), eq(${{ parameters.SonarCloud }}, true))
      inputs:
        SonarCloud: ESFA - SonarCloud
        organization: $(SonarCloudOrganisationKey)
        scannerMode: MSBuild
        projectName: "$(Build.DefinitionName)"
        ${{ if eq(parameters.SonarCloudProjectKey, '') }}:
          projectKey: ${{ replace(variables['Build.Repository.Name'], '/', '_') }}
        ${{ else }}:
          projectKey: ${{ parameters.SonarCloudProjectKey }}
        extraProperties: |
          sonar.cs.opencover.reportsPaths=$(Agent.TempDirectory)/CoverageResults/coverage.opencover.xml

    - task: DotNetCoreCLI@2
      displayName: Restore - Including Custom Feed
      inputs:
        command: restore
        projects: ${{ parameters.TargetProjects }}
        noCache: true
        feedsToUse: 'select'
        vstsFeed: 'dct-pkg'
        includeNuGetOrg: true

    - pwsh: |
        $TargetPatterns = "${{ parameters.TargetProjects }}".Trim().Split("`n")
        $TargetPatterns
        $ErrorFound = $false
        $TargetPatterns | ForEach-Object {
          $Projects = Get-ChildItem -Path $_ -Recurse
          foreach ($Project in $Projects) {
            dotnet list $Project package --deprecated | Tee-Object -Variable Deprecated
            if (([Version](dotnet --version)).Major -ge 5) {
              dotnet list $Project package --vulnerable --include-transitive | Tee-Object -Variable Vulnerable
            }
            $Errors = $Deprecated + $Vulnerable | Select-String '>'

            if ($Errors.Count -gt 0) {
              $ErrorFound = $true
            }
          }
        }

        if($ErrorFound){
            Write-Host "##vso[task.logissue type=warning]Package issues discovered, review output above"
            Write-Output "##vso[task.setvariable variable=VulnerablePackagesDetected;isreadonly=true]true"
            $(exit 1)
        }
        else {
            Write-Output "##vso[task.setvariable variable=VulnerablePackagesDetected;isreadonly=true]false"
            $(exit 0)
        }
      displayName: Package Scanning
      continueOnError: ${{ parameters.ContinueOnVulnerablePackageScanError }}

    - task: DownloadSecureFile@1
      name: DownloadDasGitHubAppPrivateKey
      displayName: 'Download DAS GitHub App private key'
      inputs:
        secureFile: 'das-github-app-private-key.pem'

    - pwsh: |
        $null = Register-PackageSource -Name NuGet -Location https://api.nuget.org/v3/index.json -ProviderName NuGet
        #NOTE: Install-Package with -SkipDependencies flag used until PowerShellGet v3 can be used to only install Octokit and GitHubJwt along with their dependencies.
        #NOTE: https://github.com/PowerShell/PowerShellGet/issues/487#issue-1000366159
        $null = Install-Package -Name "Octokit" -RequiredVersion "4.0.0" -Destination "$(Agent.TempDirectory)/packages" -Source "NuGet" -Force -SkipDependencies
        $null = Install-Package -Name "GitHubJwt" -RequiredVersion "0.0.5" -Destination "$(Agent.TempDirectory)/packages" -Source "NuGet" -Force -SkipDependencies
        $null = Install-Package -Name "jose-jwt" -RequiredVersion "4.0.1" -Destination "$(Agent.TempDirectory)/packages" -Source "NuGet" -Force -SkipDependencies
        $null = Install-Package -Name "BouncyCastle.NetCore" -RequiredVersion "1.9.0" -Destination "$(Agent.TempDirectory)/packages" -Source "NuGet" -Force -SkipDependencies

        $OctokitDll = "$(Agent.TempDirectory)/packages/Octokit.4.0.0/lib/netstandard2.0/Octokit.dll"
        $GitHubJwtDll = "$(Agent.TempDirectory)/packages/GitHubJwt.0.0.5/lib/netstandard2.0/GitHubJwt.dll"
        $JoseJwtDll = "$(Agent.TempDirectory)/packages/jose-jwt.4.0.1/lib/netstandard2.1/jose-jwt.dll"
        $BouncyCastleCryptoDll = "$(Agent.TempDirectory)/packages/BouncyCastle.NetCore.1.9.0/lib/netstandard2.0/BouncyCastle.Crypto.dll"

        $null = Add-Type -Path $OctokitDll
        $null = Add-Type -Path $GitHubJwtDll
        $null = Add-Type -Path $JoseJwtDll
        $null = Add-Type -Path $BouncyCastleCryptoDll

        $PrivateKey = [GitHubJwt.FilePrivateKeySource]::new("$(DownloadDasGitHubAppPrivateKey.secureFilePath)")
        $GitHubJwtFactoryOptions = [GitHubJwt.GitHubJwtFactoryOptions]::new()
        $GitHubJwtFactoryOptions.AppIntegrationId = $(DasGitHubAppId)
        $GitHubJwtFactoryOptions.ExpirationSeconds = 60
        $Generator = [GitHubJwt.GitHubJwtFactory]::new($PrivateKey, $GitHubJwtFactoryOptions)
        $JwtToken = $Generator.CreateEncodedJwtToken()

        $AppClient = [Octokit.GitHubClient]::new([Octokit.ProductHeaderValue]::new("das-github-app"))
        $AppClient.Credentials = [Octokit.Credentials]::new($JwtToken, ([Octokit.AuthenticationType]::Bearer))
        $Response = $AppClient.GitHubApps.CreateInstallationToken($(DasGitHubAppInstallationId)).Result

        $PullRequestComment = "Please remember to check any packages used by this application to ensure they are up to date @$(Build.SourceVersionAuthor). cc/ $(PullRequestVulnerabilitiesDetectedTaggedUsers)"

        $InstallationClient = [Octokit.GithubClient]::new([Octokit.ProductHeaderValue]::new("das-github-app-installation"))
        $InstallationClient.Credentials = [Octokit.Credentials]::new($Response.Token)
        $InstallationClient.Issue.Comment.Create("$(Build.Repository.Name)".Split('/')[0], "$(Build.Repository.Name)".Split('/')[1], $(System.PullRequest.PullRequestNumber), $PullRequestComment)
      displayName: Pull Request Commenting
      condition: and(succeeded(), eq(variables.VulnerablePackagesDetected, 'true'), eq(variables['Build.Reason'], 'PullRequest'), eq(variables.PullRequestVulnerabilitiesCommentTaskEnabled, 'true'))

    - task: DotNetCoreCLI@2
      displayName: Build
      inputs:
        projects:  ${{ parameters.TargetProjects }}
        arguments: '--configuration $(buildConfiguration) --no-restore'

    - task: DotNetCoreCLI@2
      displayName: Unit Tests
      inputs:
        command: test
        projects: ${{ parameters.UnitTestProjects }}
        publishTestResults: true
        arguments: '--configuration $(buildConfiguration) --no-build /p:CollectCoverage=true /p:CoverletOutput=$(Agent.TempDirectory)/CoverageResults/ /p:MergeWith=$(Agent.TempDirectory)/CoverageResults/coverage.json /p:CoverletOutputFormat="opencover%2cjson"'

    - task: DotNetCoreCLI@2
      displayName: Acceptance Tests
      condition: ${{ parameters.RunAcceptanceTests }}
      inputs:
        command: test
        projects: ${{ parameters.AcceptanceTestProjects }}
        publishTestResults: true
        arguments: '--configuration $(buildConfiguration) --no-build  /p:CollectCoverage=true /p:CoverletOutput=$(Agent.TempDirectory)/CoverageResults/ /p:MergeWith=$(Agent.TempDirectory)/CoverageResults/coverage.json /p:CoverletOutputFormat="opencover%2cjson"'

    - task: SonarCloudAnalyze@2
      displayName: Run SonarCloud analysis
      condition: and(succeeded(), or(in(variables['Build.SourceBranch'], 'refs/heads/master', 'refs/heads/main'), eq(variables['Build.Reason'], 'PullRequest')), eq(${{ parameters.SonarCloud }}, true))

    - task: SonarCloudPublish@2
      displayName: Publish SonarCloud analysis results on build summary
      condition: and(succeeded(), or(in(variables['Build.SourceBranch'], 'refs/heads/master', 'refs/heads/main'), eq(variables['Build.Reason'], 'PullRequest')), eq(${{ parameters.SonarCloud }}, true))
      inputs:
        pollingTimeoutSec: '300'

    - task: DotNetCoreCLI@2
      displayName: 'Publish Outer Api'
      inputs:
        command: publish
        publishWebProjects: false
        projects: ${{ parameters.PublishProject }}
        arguments: '--configuration $(buildConfiguration) --output $(build.artifactstagingdirectory)/publish --no-restore --no-build'

    - task: CopyFiles@2
      displayName: 'Copy Files to: $(build.artifactstagingdirectory)'
      inputs:
        Contents: |
          azure/**
        TargetFolder: '$(build.artifactstagingdirectory)/publish'
        OverWrite: true

    - task: PublishPipelineArtifact@1
      displayName: 'Publish Artifact'
      inputs:
        targetPath: '$(build.artifactstagingdirectory)/publish'
        artifactName: 'ApimEndpointsArtifacts'

- stage: Deploy_AT
  dependsOn: Build
  displayName: Deploy to AT
  variables:
  - group: DevTest Management Resources
  - group: AT DevTest Shared Resources
  - group: AT das-apim-endpoints
  - name: platformBuildBlockVersion
    value: $[ resources.repositories['das-platform-building-blocks'].ref ]
  jobs:
  - template: ../../pipeline-templates/job/deploy.yml
    parameters:
      ServiceConnection: SFA-DAS-DevTest-ARM
      AppRoleAssignmentsServiceConnection: das-app-role-assignments-CDS
      Environment: AT
      SchemaFilePath: $(EarningsOuterApiSchemaFilePath)
      ConfigurationSecrets: ${{ parameters.ConfigurationSecrets }}
      DeploymentName: Deploy_Earnings
      AADGroupObjectIdArray: $(AdminAADGroupObjectId),$(DevAADGroupObjectId)
      AppServiceName: $(EarningsOuterApiAppServiceName)
      CustomHostName: $(EarningsOuterApiCustomHostname)
      AppServiceKeyVaultCertificateName: $(EarningsOuterApiKeyVaultCertificateName)
      ConfigNames: $(EarningsOuterApiConfigNames)
      DeploymentPackagePath: $(Pipeline.Workspace)/ApimEndpointsArtifacts/SFA.DAS.Earnings.Api.zip
      ApiVersionSetName: $(EarningsOuterApiVersionSetName)
      ApiPath: $(EarningsOuterApiPath)
      ApiBaseUrl: $(EarningsOuterApiBaseUrl)
      ProductId: $(EarningsProductId)
      ApplicationIdentifierUri: $(EarningsOuterApiIdentifierUri)
      SandboxEnabled: ${{ parameters.SandboxEnabled }}
      AddXForwardedAuthorization: ${{ parameters.AddXForwardedAuthorization }}

- stage: Deploy_TEST
  dependsOn: Build
  displayName: Deploy to TEST
  variables:
  - group: DevTest Management Resources
  - group: TEST DevTest Shared Resources
  - group: TEST das-apim-endpoints
  - name: platformBuildBlockVersion
    value: $[ resources.repositories['das-platform-building-blocks'].ref ]
  jobs:
  - template: ../../pipeline-templates/job/deploy.yml
    parameters:
      ServiceConnection: SFA-DAS-DevTest-ARM
      AppRoleAssignmentsServiceConnection: das-app-role-assignments-CDS
      Environment: TEST
      SchemaFilePath: $(EarningsOuterApiSchemaFilePath)
      ConfigurationSecrets: ${{ parameters.ConfigurationSecrets }}
      DeploymentName: Deploy_Earnings
      AADGroupObjectIdArray: $(AdminAADGroupObjectId),$(DevAADGroupObjectId)
      AppServiceName: $(EarningsOuterApiAppServiceName)
      CustomHostName: $(EarningsOuterApiCustomHostname)
      AppServiceKeyVaultCertificateName: $(EarningsOuterApiKeyVaultCertificateName)
      ConfigNames: $(EarningsOuterApiConfigNames)
      DeploymentPackagePath: $(Pipeline.Workspace)/ApimEndpointsArtifacts/SFA.DAS.Earnings.Api.zip
      ApiVersionSetName: $(EarningsOuterApiVersionSetName)
      ApiPath: $(EarningsOuterApiPath)
      ApiBaseUrl: $(EarningsOuterApiBaseUrl)
      ProductId: $(EarningsProductId)
      ApplicationIdentifierUri: $(EarningsOuterApiIdentifierUri)
      SandboxEnabled: ${{ parameters.SandboxEnabled }}
      AddXForwardedAuthorization: ${{ parameters.AddXForwardedAuthorization }}

- stage: Deploy_TEST2
  dependsOn: Build
  displayName: Deploy to TEST2
  variables:
  - group: DevTest Management Resources
  - group: TEST2 DevTest Shared Resources
  - group: TEST2 das-apim-endpoints
  - name: platformBuildBlockVersion
    value: $[ resources.repositories['das-platform-building-blocks'].ref ]
  jobs:
  - template: ../../pipeline-templates/job/deploy.yml
    parameters:
      ServiceConnection: SFA-DAS-DevTest-ARM
      AppRoleAssignmentsServiceConnection: das-app-role-assignments-CDS
      Environment: TEST2
      SchemaFilePath: $(EarningsOuterApiSchemaFilePath)
      ConfigurationSecrets: ${{ parameters.ConfigurationSecrets }}
      DeploymentName: Deploy_Earnings
      AADGroupObjectIdArray: $(AdminAADGroupObjectId),$(DevAADGroupObjectId)
      AppServiceName: $(EarningsOuterApiAppServiceName)
      CustomHostName: $(EarningsOuterApiCustomHostname)
      AppServiceKeyVaultCertificateName: $(EarningsOuterApiKeyVaultCertificateName)
      ConfigNames: $(EarningsOuterApiConfigNames)
      DeploymentPackagePath: $(Pipeline.Workspace)/ApimEndpointsArtifacts/SFA.DAS.Earnings.Api.zip
      ApiVersionSetName: $(EarningsOuterApiVersionSetName)
      ApiPath: $(EarningsOuterApiPath)
      ApiBaseUrl: $(EarningsOuterApiBaseUrl)
      ProductId: $(EarningsProductId)
      ApplicationIdentifierUri: $(EarningsOuterApiIdentifierUri)
      SandboxEnabled: ${{ parameters.SandboxEnabled }}
      AddXForwardedAuthorization: ${{ parameters.AddXForwardedAuthorization }}

- stage: Deploy_PP
  dependsOn: Build
  displayName: Deploy to PP
  variables:
  - group: PREPROD Management Resources
  - group: PREPROD Shared Resources
  - group: PREPROD das-apim-endpoints
  - name: platformBuildBlockVersion
    value: $[ resources.repositories['das-platform-building-blocks'].ref ]
  jobs:
  - template: ../../pipeline-templates/job/deploy.yml
    parameters:
      ServiceConnection: SFA-DIG-PreProd-ARM
      AppRoleAssignmentsServiceConnection: das-app-role-assignments-FCS
      Environment: PP
      SchemaFilePath: $(EarningsOuterApiSchemaFilePath)
      ConfigurationSecrets: ${{ parameters.ConfigurationSecrets }}
      DeploymentName: Deploy_Earnings
      AADGroupObjectIdArray: $(AdminAADGroupObjectId),$(DevAADGroupObjectId)
      AppServiceName: $(EarningsOuterApiAppServiceName)
      CustomHostName: $(EarningsOuterApiCustomHostname)
      AppServiceKeyVaultCertificateName: $(EarningsOuterApiKeyVaultCertificateName)
      ConfigNames: $(EarningsOuterApiConfigNames)
      DeploymentPackagePath: $(Pipeline.Workspace)/ApimEndpointsArtifacts/SFA.DAS.Earnings.Api.zip
      ApiVersionSetName: $(EarningsOuterApiVersionSetName)
      ApiPath: $(EarningsOuterApiPath)
      ApiBaseUrl: $(EarningsOuterApiBaseUrl)
      ProductId: $(EarningsProductId)
      ApplicationIdentifierUri: $(EarningsOuterApiIdentifierUri)
      SandboxEnabled: ${{ parameters.SandboxEnabled }}
      AddXForwardedAuthorization: ${{ parameters.AddXForwardedAuthorization }}

- stage: Deploy_PROD
  dependsOn: Build
  displayName: Deploy to PROD
  variables:
  - group: PROD Management Resources
  - group: PROD Shared Resources
  - group: PROD das-apim-endpoints
  - name: platformBuildBlockVersion
    value: $[ resources.repositories['das-platform-building-blocks'].ref ]
  jobs:
  - template: ../../pipeline-templates/job/deploy.yml
    parameters:
      ServiceConnection: SFA-DIG-Prod-ARM
      AppRoleAssignmentsServiceConnection: das-app-role-assignments-FCS
      Environment: PROD
      SchemaFilePath: $(EarningsOuterApiSchemaFilePath)
      ConfigurationSecrets: ${{ parameters.ConfigurationSecrets }}
      DeploymentName: Deploy_Earnings
      AppServiceName: $(EarningsOuterApiAppServiceName)
      CustomHostName: $(EarningsOuterApiCustomHostname)
      AppServiceKeyVaultCertificateName: $(EarningsOuterApiKeyVaultCertificateName)
      ConfigNames: $(EarningsOuterApiConfigNames)
      DeploymentPackagePath: $(Pipeline.Workspace)/ApimEndpointsArtifacts/SFA.DAS.Earnings.Api.zip
      ApiVersionSetName: $(EarningsOuterApiVersionSetName)
      ApiPath: $(EarningsOuterApiPath)
      ApiBaseUrl: $(EarningsOuterApiBaseUrl)
      ProductId: $(EarningsProductId)
      ApplicationIdentifierUri: $(EarningsOuterApiIdentifierUri)
      SandboxEnabled: ${{ parameters.SandboxEnabled }}
      AddXForwardedAuthorization: ${{ parameters.AddXForwardedAuthorization }}

- stage: Deploy_MO
  dependsOn: Build
  displayName: Deploy to MO
  variables:
  - group: MO Management Resources
  - group: MO Shared Resources
  - group: MO das-apim-endpoints
  - name: platformBuildBlockVersion
    value: $[ resources.repositories['das-platform-building-blocks'].ref ]
  jobs:
  - template: ../../pipeline-templates/job/deploy.yml
    parameters:
      ServiceConnection: SFA-ASM-ModelOffice-ARM
      AppRoleAssignmentsServiceConnection: das-app-role-assignments-FCS
      Environment: MO
      SchemaFilePath: $(EarningsOuterApiSchemaFilePath)
      ConfigurationSecrets: ${{ parameters.ConfigurationSecrets }}
      DeploymentName: Deploy_Earnings
      AppServiceName: $(EarningsOuterApiAppServiceName)
      CustomHostName: $(EarningsOuterApiCustomHostname)
      AppServiceKeyVaultCertificateName: $(EarningsOuterApiKeyVaultCertificateName)
      ConfigNames: $(EarningsOuterApiConfigNames)
      DeploymentPackagePath: $(Pipeline.Workspace)/ApimEndpointsArtifacts/SFA.DAS.Earnings.Api.zip
      ApiVersionSetName: $(EarningsOuterApiVersionSetName)
      ApiPath: $(EarningsOuterApiPath)
      ApiBaseUrl: $(EarningsOuterApiBaseUrl)
      ProductId: $(EarningsProductId)
      ApplicationIdentifierUri: $(EarningsOuterApiIdentifierUri)
      SandboxEnabled: ${{ parameters.SandboxEnabled }}
      AddXForwardedAuthorization: ${{ parameters.AddXForwardedAuthorization }}

- stage: Deploy_DEMO
  dependsOn: Build
  displayName: Deploy to DEMO
  variables:
  - group: DevTest Management Resources
  - group: DEMO DevTest Shared Resources
  - group: DEMO das-apim-endpoints
  - name: platformBuildBlockVersion
    value: $[ resources.repositories['das-platform-building-blocks'].ref ]
  jobs:
  - template: ../../pipeline-templates/job/deploy.yml
    parameters:
      ServiceConnection: SFA-DAS-DevTest-ARM
      AppRoleAssignmentsServiceConnection: das-app-role-assignments-CDS
      Environment: DEMO
      SchemaFilePath: $(EarningsOuterApiSchemaFilePath)
      ConfigurationSecrets: ${{ parameters.ConfigurationSecrets }}
      DeploymentName: Deploy_Earnings
      AADGroupObjectIdArray: $(AdminAADGroupObjectId),$(DevAADGroupObjectId)
      AppServiceName: $(EarningsOuterApiAppServiceName)
      CustomHostName: $(EarningsOuterApiCustomHostname)
      AppServiceKeyVaultCertificateName: $(EarningsOuterApiKeyVaultCertificateName)
      ConfigNames: $(EarningsOuterApiConfigNames)
      DeploymentPackagePath: $(Pipeline.Workspace)/ApimEndpointsArtifacts/SFA.DAS.Earnings.Api.zip
      ApiVersionSetName: $(EarningsOuterApiVersionSetName)
      ApiPath: $(EarningsOuterApiPath)
      ApiBaseUrl: $(EarningsOuterApiBaseUrl)
      ProductId: $(EarningsProductId)
      ApplicationIdentifierUri: $(EarningsOuterApiIdentifierUri)
      SandboxEnabled: ${{ parameters.SandboxEnabled }}
      AddXForwardedAuthorization: ${{ parameters.AddXForwardedAuthorization }}
